getwd()
setwd("C://Users//ranga.ankalugari//assignment//Takeaway Assignment - R _ Python")
getwd()
source('C:/Users/ranga.ankalugari/assignment/Takeaway Assignment - R _ Python/R_exercise_template.R')
head(df_i)
df_i = read.csv('imdb.csv',quote = "\"")
df <- df_i
movies
movies(df)
movies(df)
df_i = read.csv('imdb.csv',quote = "\\"")
;
)
""
df_i = read.csv('imdb.csv',quote = "\"")
movies(df)
df_i = read.csv('imdb.csv')
movies(df_i)
df_i.summary
class(df_i)
lapply(df_i, class)
least_sales(df_s)
source('C:/Users/ranga.ankalugari/assignment/Takeaway Assignment - R _ Python/R_exercise_template.R')
least_sales(df_s)
sales_year_region(df_s)
days_diff(df_s)
source('C:/Users/ranga.ankalugari/assignment/Takeaway Assignment - R _ Python/R_exercise_template.R')
movies
movies(df_i)
df_i = read.csv('imdb.csv',quote = "\"")
movies(df_i)
source('C:/Users/ranga.ankalugari/assignment/Takeaway Assignment - R _ Python/R_exercise_template.R')
df_i = read.csv('imdb.csv',quote = "\"")
movies(df_i)
head(df_s)
mgr_slsmn(df_s)
slsmn_units(df_s)
slsmn_units(df_s)
slsmn_units(df_s)
source('C:/Users/ranga.ankalugari/assignment/Takeaway Assignment - R _ Python/R_exercise_template.R')
slsmn_units(df_s)
source('C:/Users/ranga.ankalugari/assignment/Takeaway Assignment - R _ Python/R_exercise_template.R')
slsmn_units(df_s)
source('C:/Users/ranga.ankalugari/assignment/Takeaway Assignment - R _ Python/R_exercise_template.R')
slsmn_units(df_s)
sales_pct(df_s)
fifth_movie(df_i)
movies(df_i)
sort_df(df_i)
head(sort_df(df_i))
df_i[with(df_i,order("year"))]
head(df_i[with(df_i,order("year"))])
df_i[order(year,-imdbRating),]
df_i[with(df_i,order("year",-"imdbRating"))]
df_i[with(df_i,order("year",-"imdbRating")),]
df_i[with(df_i,order("year","-imdbRating")),]
df_i[with(df_i,order("year","imdbRating")),]
df_i[with(df_i,order(year,imdbRating)),]
arrange(df_i,year,desc(imdbRating))
dupl_rows(df_d)
drop_row(df_d)
length(drop_row(df_d))
nrow(drop_row(df_d))
sub_numeric(df_d)
volume(df_d)
impute(df_d)
is.na(df$price)
is.na(df_d$price)
sum(is.na(df_d$price))
sum(is.na(impute(df_d)))
